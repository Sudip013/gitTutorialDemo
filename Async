const blogs = [];
let lastActivityTime = null;

function createPost(title) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            blogs.push({ title: title });
            resolve();
        }, 1000);
    });
}

function updateLastUserActivityTime() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            lastActivityTime = new Date();
            resolve();
        }, 1000);
    });
}

function deletePost() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (blogs.length > 0) {
                const deletedPost = blogs.pop();
                resolve(deletedPost);
            } else {
                reject('ERROR: ARRAY IS EMPTY');
            }
        }, 1000);
    });
}

function getColdDrinks() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('Cold drinks received');
        }, 2000);
    });
}

createPost('Post 1')
    .then(() => updateLastUserActivityTime())
    .then(() => createPost('Post 2'))
    .then(() => updateLastUserActivityTime())
    .then(() => {
        console.log('Posts:', blogs);
        console.log('Last Activity Time:', lastActivityTime);
        return deletePost();
    })
    .then((deletedPost) => {
        console.log('Deleted Post:', deletedPost);
        console.log('Updated Posts:', blogs);
        return getColdDrinks();
    })
    .then((coldDrinks) => {
        console.log(coldDrinks);
    })
    .catch((error) => {
        console.log(error);
    });
Async
const blogs = [];
let lastActivityTime = null;

function createPost(title) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            blogs.push({ title: title });
            resolve();
        }, 1000);
    });
}

function updateLastUserActivityTime() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            lastActivityTime = new Date();
            resolve();
        }, 1000);
    });
}

function deletePost() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (blogs.length > 0) {
                const deletedPost = blogs.pop();
                resolve(deletedPost);
            } else {
                reject('ERROR: ARRAY IS EMPTY');
            }
        }, 1000);
    });
}

function getColdDrinks() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve('Cold drinks received');
        }, 2000);
    });
}

async function performActions() {
    try {
        await createPost('Post 1');
        await updateLastUserActivityTime();
        await createPost('Post 2');
        await updateLastUserActivityTime();

        console.log('Posts:', blogs);
        console.log('Last Activity Time:', lastActivityTime);

        const deletedPost = await deletePost();
        console.log('Deleted Post:', deletedPost);
        console.log('Updated Posts:', blogs);

        const coldDrinks = await getColdDrinks();
        console.log(coldDrinks);
    } catch (error) {
        console.log(error);
    }
}

performActions();
